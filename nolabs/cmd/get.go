/*
Copyright Â© 2022 Himadri Bhattacharjee <cz7047@protonmail.com>

*/
package cmd

import (
	"encoding/json"
	"fmt"
	"github.com/7047payloads/pentest/nolabs/constants"
	"github.com/7047payloads/pentest/nolabs/metadata"
	"github.com/cheggaaa/pb/v3"
	"github.com/spf13/cobra"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
)

// getCmd represents the get command
var getCmd = &cobra.Command{
	Use:   "get <key> <endpoint>",
	Short: "",
	Long:  ``,
	RunE: func(cmd *cobra.Command, args []string) error {
		if len(args) < 2 {
			return fmt.Errorf("A key and an endpoit are to be specified")
		}
		endpoint := args[1]
		if !strings.HasPrefix(endpoint, "https://") || !strings.HasPrefix(endpoint, "http://") {
			endpoint = "https://" + endpoint
		}
		if !strings.HasSuffix(endpoint, "/") {
			endpoint += "/"
		}
		get(args[1], args[0])
		return nil
	},
}

func init() {
	rootCmd.AddCommand(getCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// getCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// getCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

func get(endpoint, key string) {
	branch := fmt.Sprintf("%s%s%s/", endpoint, constants.Handle, key)
	r, err := http.Get(fmt.Sprintf("%s%s.gif", branch, key))
	if err != nil {
		log.Fatalln(err)
	}
	defer r.Body.Close()
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Fatalln(err)
	}
	meta := &metadata.Meta{}
	if err := json.Unmarshal(body[8:], meta); err != nil {
		log.Fatalln("Found invalid JSON for metadata. Check the supplied key and retry.")
	}
	bar := pb.ProgressBarTemplate(constants.BarTemplate).Start64(meta.Chunks)
	bar.Set("statement", fmt.Sprintf("downloading %s", meta.Name))
	OutFile, err := os.Create(meta.Name)
	if err != nil {
		log.Fatalln(err)
	}
	defer OutFile.Close()
	var i int64
	for ; i < meta.Chunks; i++ {
		r, err := http.Get(fmt.Sprintf("%s%s_%d.gif", branch, key, i))
		if err != nil {
			log.Fatalln(err)
		}
		defer r.Body.Close()
		io.CopyN(io.Discard, r.Body, 8)
		io.Copy(OutFile, r.Body)
		bar.Increment()
	}
	bar.Finish()
	log.Fatalln(err)
}
