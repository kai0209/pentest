package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"math/rand"
	"mime/multipart"
	"net/http"
	"os"
	"time"
)

const endpoint string = "https://localhost/"
const connector string = "fckeditor/editor/filemanager/connectors/php/connector.php?Type=Media&CurrentFolder="
const newFolder string = "&Command=CreateFolder&NewFolderName="
const upload string = "&Command=FileUpload"
const handle string = "userfiles/media/"

type Meta struct {
	Name   string `json:"name"`
	Chunks int64  `json:"chunks"`
}

func uploadFile(uri string, filepath string, key string) {
	file, err := os.Open(filepath)
	if err != nil {
		log.Fatalln(err)
	}
	defer file.Close()

	stat, err := file.Stat()
	if err != nil {
		log.Fatalln(err)
	}

	// We'll divide it into 1MiB chunks
	metadata := Meta{filepath, 1 + stat.Size()>>20}

	marshaled, _ := json.Marshal(&metadata)
	client := &http.Client{}
	b := &bytes.Buffer{}

	w := multipart.NewWriter(b)
	p, err := w.CreateFormFile("NewFile", fmt.Sprintf("%s.gif", key))
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Fprintf(p, "GIF89a;\n") // The GIF89a header is 8 bytes
	p.Write(marshaled)
	w.Close()
	req, _ := http.NewRequest("POST", uri, b)
	req.Header.Add("Content-Type", w.FormDataContentType())

	r, err := client.Do(req)
	if err != nil {
		log.Fatalln(err)
	}
	defer r.Body.Close()
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println(string(body))
	var i int64
	for ; i < metadata.Chunks; i++ {
		client := &http.Client{}
		b := &bytes.Buffer{}

		w := multipart.NewWriter(b)
		p, err := w.CreateFormFile("NewFile", fmt.Sprintf("%s_%d.gif", key, i))
		if err != nil {
			log.Fatalln(err)
		}
		fmt.Fprintf(p, "GIF89a;\n") // The GIF89a header is 8 bytes
		if i == metadata.Chunks-1 {          // last chunk
			_, err := io.Copy(p, file)
			if err != nil {
				log.Fatalln(err)
			}
		} else {
			_, err = io.CopyN(p, file, 1<<20)
			if err != nil {
				log.Fatalln(err)
			}
		}
		w.Close()
		req, _ := http.NewRequest("POST", uri, b)
		req.Header.Add("Content-Type", w.FormDataContentType())

		r, err := client.Do(req)
		if err != nil {
			log.Fatalln(err)
		}
		defer r.Body.Close()
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			log.Fatalln(err)
		}
		fmt.Println(string(body))
	}
}

func main() {
	get := flag.Bool("get", false, "Retrieve file by supplying key")
	flag.Parse()
	args := flag.Args()
	if len(args) != 1 {
		log.Fatalln("A filepath or a key (for retrieval) must be supplied")
	}
	if *get {
		key := args[0]
		r, err := http.Get(fmt.Sprintf("%s%s%s/%s.gif", endpoint, handle, key, key))
		if err != nil {
			log.Fatalln(err)
		}
		defer r.Body.Close()
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			log.Fatalln(err)
		}
		fmt.Println(string(body[8:]))
	} else {
		rand.Seed(time.Now().UnixNano())
		var alphabet = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_")
		s := make([]rune, 16)
		for i := range s {
			s[i] = alphabet[rand.Intn(64)]
		}
		key := string(s)
		http.Get(fmt.Sprintf("%s%s%s%s", endpoint, connector, newFolder, key))
		uploadFile(endpoint+connector+key+upload, args[0], key)
		fmt.Printf("Key: %s\n", key)
	}
}
